Assignment_3_MatrixMultiplication
--------------Foothill Class Part A---------------

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Locale;
import java.util.Random;
import java.util.Set;

public class Foothill extends Exception
{
	final static int MAT_SIZE = 100;

	// -------  proof of correctness --------------
	public static void main(String[] args) throws Exception
	{

		long startTime, stopTime;
		double smallPercent;
		NumberFormat tidy = NumberFormat.getInstance(Locale.US);
		tidy.setMaximumFractionDigits(4);

		smallPercent = (MAT_SIZE * MAT_SIZE) / 10;


		ArrayList<Location> locations = new ArrayList<Location>();

		while (locations.size() < smallPercent){
			Location l = new Location(randInt(),randInt());
			if(!locations.contains(l)){
				locations.add(l);
			}
		}
		// non-sparse matrices
		double[][] mat, matAns;

		mat = new double[MAT_SIZE][MAT_SIZE];
		matAns = new double[MAT_SIZE][MAT_SIZE];

		for (Location loc: locations){
			mat[loc.getRow()][loc.getCol()] = randDouble();
		}

		matShow(mat, MAT_SIZE - 10, 10);

		startTime = System.nanoTime();
		matMult(mat, mat, matAns);
		stopTime = System.nanoTime();
		System.out.println();
		matShow(matAns, MAT_SIZE - 10, 10);

		System.out.println("\nSize = " + MAT_SIZE + " Mat. Mult. Elapsed Time: "
				+ tidy.format( (stopTime - startTime) / 1e9)
				+ " seconds.");
	}

	private static double randDouble(){
		double d = Math.random();
		return d;
	}
	private static int randInt(){
		Random rand = new Random();
		int i = rand.nextInt(MAT_SIZE);
		return i;
	}

	public static void matMult(
			double[][] matA, double[][] matB, double[][]matC){
		if (matA[0].length != matB[0].length){
			throw new IllegalArgumentException(
					"Matrix dimension incompatible.");
		}
		for (int i = 0; i < matA.length; i++){
			for (int j = 0; j < matB[0].length; j++){
				for (int k = 0; k < matA[0].length; k++){
					matC[i][j] += (matA[i][k] * matB[k][j]);
				}
			}
		}
	}
	public static void matShow(double[][] matA, int start, int size){
		if (start < 0 || start > MAT_SIZE ||
				start + size < MAT_SIZE || size < 1){
			throw new IllegalArgumentException(
					"Display dimensions incompatible.");
		}
		DecimalFormat format = new DecimalFormat("#0.00");
		for (int i = start; i < start + size; i++){
			for (int j = start; j < start +size; j++){
				System.out.print(format.format(matA[i][j]) + " ");
				if (j == start + size -1){
					System.out.print("\n");
				}
			}
		}
	}
}
class Location{
	private int row; 
	private int col;

	public Location(int row, int col){
		if (row < 0 || col < 0 ||
				row >= Foothill.MAT_SIZE || col >= Foothill.MAT_SIZE){
			throw new IllegalArgumentException(
					"Location instance values incompatible.");
		}
		this.row = row;
		this.col = col;
	}
	public int getRow(){
		return this.row;
	}
	public int getCol(){
		return this.col;
	}
	@Override
	public boolean equals(Object o){
		if(o instanceof Location){
			Location l = (Location) o;
			return (this.row == l.row && this.col == l.col);
		}	
		return false;
	}
}







---------------Run 1 Output of Part A --------------------

0.00 0.00 0.00 0.00 0.98 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.48 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.42 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 

0.08 0.37 0.47 0.04 0.14 1.19 0.55 0.78 0.00 0.00 
0.50 0.38 0.50 0.00 1.28 0.00 0.05 0.77 0.89 0.36 
0.00 1.29 0.70 0.04 0.26 0.17 0.06 0.35 0.06 0.81 
0.86 1.41 0.00 0.00 0.00 0.75 0.69 0.22 0.09 0.10 
0.84 0.51 0.00 1.05 0.31 1.00 0.44 0.56 0.00 1.15 
0.60 0.36 0.66 0.66 0.61 0.18 0.31 0.65 0.70 0.00 
0.71 0.48 0.02 0.03 0.00 0.00 0.08 0.26 0.47 1.40 
0.14 0.28 0.11 0.88 0.40 0.03 0.62 0.00 0.03 0.83 
1.27 0.33 0.07 0.20 0.15 0.21 0.45 0.91 0.65 0.49 
1.72 0.16 0.00 0.00 0.00 0.34 0.00 0.35 0.00 0.00 

Size = 200 Mat. Mult. Elapsed Time: 0.0389 seconds.

---------------Run 2 Output of Part A --------------------

0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.51 0.00 0.83 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.69 0.65 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.74 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.77 0.66 
0.00 0.00 0.54 0.00 0.00 0.00 0.00 0.72 0.00 0.00 

1.40 0.00 0.18 0.00 0.01 0.59 0.30 0.00 0.00 0.53 
0.46 0.00 0.00 0.00 0.28 0.15 0.00 0.24 0.00 0.63 
0.33 0.74 0.00 0.62 0.05 0.42 0.00 0.06 0.47 0.45 
0.86 0.00 0.10 0.00 0.38 0.00 0.00 0.45 0.82 0.00 
1.31 0.00 0.03 0.50 0.00 0.00 0.00 0.00 0.00 0.58 
0.01 0.00 0.00 0.00 0.04 0.47 0.14 0.04 0.36 0.15 
0.00 1.04 0.05 0.11 0.47 0.00 0.22 0.13 1.86 0.78 
0.00 0.57 0.00 0.04 0.04 0.46 0.21 0.17 0.88 0.00 
0.08 0.00 0.54 0.74 0.31 0.02 0.36 0.48 2.38 0.88 
0.19 0.64 0.26 0.00 0.83 0.75 1.22 1.58 0.00 0.02 

Size = 400 Mat. Mult. Elapsed Time: 0.2427 seconds.

---------------Run 3 Output of Part A --------------------

0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.11 0.00 0.00 0.00 0.00 0.00 0.91 
0.00 0.00 0.22 0.00 0.89 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.42 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.65 0.00 0.00 
0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 

2.30 1.12 2.40 2.52 1.02 3.54 2.42 1.72 1.84 0.88 
1.52 1.30 1.50 2.90 1.35 2.67 2.63 0.83 1.26 3.67 
1.45 0.82 2.72 1.87 1.33 2.37 2.00 1.12 0.87 1.34 
1.89 2.94 0.93 1.72 2.33 1.53 3.59 1.02 2.34 1.55 
1.86 1.48 1.49 3.17 3.13 3.43 1.36 3.19 1.85 1.57 
3.33 1.66 1.12 2.01 3.94 2.09 2.77 1.02 3.37 0.57 
1.75 1.71 1.32 2.00 2.73 1.43 2.49 1.46 3.16 1.37 
2.80 2.55 3.51 2.08 1.45 2.98 1.38 3.69 1.96 1.31 
2.18 1.98 2.76 2.47 2.39 1.70 1.11 1.84 1.56 1.35 
1.36 1.13 1.20 1.97 1.09 3.13 2.57 0.90 1.25 1.49 

Size = 800 Mat. Mult. Elapsed Time: 7.6956 seconds.



______________ Assignment Questions: _____________________



Initial Estimate: 
Matrix multiplication algorithm would iterate over a matrix of n values, to 
multiply it would have to iterate again through another matrix of n values, 
Ultimately the insertion into a 3rd matrix would result in iterating through 
another n values. n being an arbitrary set size. So my estimate would be a time
complexity of n * n * n.   O(N)^3. With the upper bound and Θ() estimate being 
close.

Actual implementation: Big O reasoning
My matrix multiplication algorithm iteratively computes each element of the 
resultant matrix. In order to do so, three nested for loops were required, each
of which iterating through the size (either the number of columns or the number
of rows since our matrices are square) of the input matrices. Due to the nature
of my implementation there is no chance of early termination as all loops must
run their full course which is related to M size, therefore upper bound and Θ()
estimate are essentially the same. Variable assignments and if statements are
insignificant in calculating big O relative to our algorithm which contains
triple nested for loops, so they are disregarded.


What was the smallest M that gave you a non-zero time?
After commenting out the show method calls in which I implemented bounds 
checking, the smallest M value that yielded a non zero time CONSISTENTLY is 10.
Although when playing around with the M value of 9 it seems every so often it
would give a non zero value as well. This may be attributed to my laptop's many
processes that are running slowing the algorithm down, or possibly caching 
mechanisms.
 
What happened when you doubled M, tripled it, quadrupled it, etc? Give several
M values and their times in a table.

*A pretty significant amount of variance so I took three runs and averaged them
for the M values under 1600.

M value | Time
50		| 0.0038 seconds
100		| 0.0098 seconds
200		| 0.0288 seconds
400		| 0.2326 seconds
800		| 7.8653 seconds
1600    | 115.1929 seconds


How large an M can you use before the program refuses to run (exception or 
run-time error due to memory overload) or it takes so long you can't wait for 
the run?
So at the M value of 1000 the algorithm time is approximately 16.9475 seconds.
Going along with my estimate of O(N)^3 a M value size of 10000 would yield 
16.9475 * 10^3 seconds. 10 being that 10,000 is 10 * 1000. Which is long enough 
that I wouldn't want to wait for the run.


How did the data agree or disagree with your original time complexity estimate?
So my initial time complexity estimate is O(N)^3. Doubling the sample size 
would make it (2*N)^3 which equals 8N^3. So the time value from size 50 to size
100 should be 0.0038 * 8. But instead it is 0.0098. The M values which matched
my bound estimates are the times at M values 200 and 400. The time at size 400 
is 0.2380 which is around 8 times the time at size 200 which is 0.0351. It 
seems in some cases it agreed and in others it did not.